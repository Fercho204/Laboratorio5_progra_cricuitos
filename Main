// Laboratorio 5 finalizado
//------------------------------------------------------------------------------
// Encabezado
//------------------------------------------------------------------------------
// Universidad del valle de Guatemala
// IE2023 Programación de Microcontroladores
// Author : Fernando José Pérez Palomo - 22357
// Laboratorio: Laboratorio5.asm
// Descripción: Controlar 2 servomotores y 1 led con 3 potenciómetros 
// Hardware: ATMega328P

#define F_CPU 16000000UL
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include "PWM1/PWM1.h"

volatile uint8_t conversion = 1; // Inicializo mi contador.
volatile uint16_t contador1 = 0; // Inicializo mi contador
volatile uint16_t valor     = 0;
volatile	uint8_t valoradc = 0; //Variable donde guardare el valor ADC.
volatile	uint8_t bmenosig = 0; //Variable donde guardo los 4 bits menos significativos.

void setupPWM0(void) {
	cli();
	// Configura los pines de los botones como entrada con pull-up
	UCSR0B = 0;
	//Configurando el pin 1 del puerto B como salida. (OC1A)
	DDRB |= (1<<DDB2);
	TCCR0A = 0;
	TCCR0B = 0;
	//Configuramos el modo y el prescaler.
	TCCR0A |= (1<<COM0A1);//|(1<<COM1A0); //Configuramos en modo rápido no invertido.
	// Configuramos el modo Fast para que llegue al OCR1A
	TCCR0A |= (1<<WGM11);//|(1<<WGM10);
	TCCR0B |= (1<<WGM13)|(1<<WGM12);
	//Configuro mi prescaler a 8, debido a que mi periodo máximo es de 32.77 ms y necesito solo 20 ms para mover el servo.
	TCCR1B |= (1<<CS11);
	//Escribo 39999 a ICR1 dividido entre H y L
	ICR1H = 0x9C;
	ICR1L = 0x3F;
	sei();
}

void setupPWM1(void) {
	cli();
	// Configura los pines de los botones como entrada con pull-up
	UCSR0B = 0;
	//Configurando el pin 1 del puerto B como salida. (OC1A)
	DDRB |= (1<<DDB1);
	TCCR1A = 0;
	TCCR1B = 0;
	//Configuramos el modo y el prescaler.
	TCCR1A |= (1<<COM1A1);//|(1<<COM1A0); //Configuramos en modo rápido no invertido.
	// Configuramos el modo Fast para que llegue al OCR1A
	TCCR1A |= (1<<WGM11);//|(1<<WGM10);
	TCCR1B |= (1<<WGM13)|(1<<WGM12);
	//Configuro mi prescaler a 8, debido a que mi periodo máximo es de 32.77 ms y necesito solo 20 ms para mover el servo.
	TCCR1B |= (1<<CS11);
	//Escribo 39999 a ICR1 dividido entre H y L
	ICR1H = 0x9C;
	ICR1L = 0x3F;
	sei();
}

void setupPWM2(void) {
	cli();
	// Configura los pines de los botones como entrada con pull-up
	UCSR0B = 0;
	//Configurando el pin 1 del puerto B como salida. (OC1A)
	DDRB |= (1<<DDB3);
	TCCR2A = 0;
	TCCR2B = 0;
	//Configuramos el modo y el prescaler.
	TCCR2A |= (1<<COM2A1);//|(1<<COM1A0); //Configuramos en modo rápido no invertido.
	// Configuramos el modo Fast para que llegue al OxFF
	TCCR2A |= (1<<WGM21)|(1<<WGM20);
	//Configuro mi prescaler a 8, debido a que mi periodo máximo es de 32.77 ms y necesito solo 20 ms para mover el servo.
	TCCR2B |= (1<<CS22)|(1<<CS21)|(1<<CS20);
	sei();
}

void InitADC0(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
	ADMUX &= ~(1 << REFS1);
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR);
	//Apagamos la salida digital de PINC0
	DIDR0 |= (1 << ADC0D);
	//Configuración del canal 0 ya que allí esta mi potenciómetro.
	ADMUX &= ~(1 << MUX0);
	ADCSRA = 0;
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
	
	
}
	
void InitADC1(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
	ADMUX &= ~(1 << REFS1);
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR); 
	//Apagamos la salida digital de PINC0
	DIDR0 |= (1 << ADC2D);
	//Configuración del canal 0 ya que allí esta mi potenciómetro.
	ADMUX &= ~(1 << MUX0); 
	ADCSRA = 0;
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
	
	
}

void InitADC2(void){
	ADMUX |= (1 << REFS0);      //Estoy configurando a que funcione con AVCC.
	ADMUX &= ~(1 << REFS1);
	//Justificacion a la izquierda.
	ADMUX |= (1 << ADLAR);
	//Apagamos la salida digital de PINC1
	DIDR0 |= (1 << ADC1D);
	//Configuración del canal 0 ya que allí esta mi potenciómetro.
	ADMUX |= (1 << MUX0);
	ADCSRA = 0;
	//Habilitamos la bandera del ADC
	ADCSRA |= (1 << ADIE);
	//Habilitamos el prescaler a 128.
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
	//Habilitamos el ADC
	ADCSRA |= (1 << ADEN);
	
	
}
//*****************************************************
// Loop principal:
//*****************************************************
int main(void) {
	setupPWM1(); // Inicializa todo.
	setupPWM2();
	InitADC0();
	InitADC1();
	InitADC2();
	//InitADC();//Configuro mi ADC.
	DDRB = 0xFF;
	ADCSRA |= (1<<ADSC);   //Habilito la interrupcion de ADC.
	while (1) {
		PWM1(2, valoradc);
		_delay_ms(10);
		PWM1(1, valoradc);
		_delay_ms(10);
		PWM1(0, valoradc);
		_delay_ms(10);
		
	}
	return 0;
}


//*****************************************************
// Interrupciones:
//*****************************************************

ISR(ADC_vect){
	//uint16_t valor_total;
	valoradc = ADCH;
	ADCSRA |= (1<<ADIF); // Apaga la bandera de interrupción del ADC
}
